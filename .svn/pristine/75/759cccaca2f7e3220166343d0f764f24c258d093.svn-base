using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data.SqlClient;
using Twee.Comm;
using System.Data;

namespace Twee.DataMgr
{
    public class AdministratorDataMgr
    {
        #region  BasicMethod

        /// <summary>
        /// 是否存在该记录
        /// </summary>
        public bool Exists(Guid guid)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("select count(1) from wn_adminstrator");
            strSql.Append(" where guid=@guid ");
            SqlParameter[] parameters = {
					new SqlParameter("@guid", SqlDbType.UniqueIdentifier,16)			};
            parameters[0].Value = guid;

            return DbHelperSQL.Exists(strSql.ToString(), parameters);
        }

        public bool Exists(string username,string pwd)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("select count(1) from wn_adminstrator");
            strSql.Append(" where  loginNo=@loginNo and pass=@pass and wnstat=1");
            SqlParameter[] parameters = {
					new SqlParameter("@loginNo", SqlDbType.NVarChar,50),
                    new SqlParameter("@pass", SqlDbType.NVarChar,50),
                                     };
            parameters[0].Value = username;
            parameters[1].Value = pwd;

            return DbHelperSQL.Exists(strSql.ToString(), parameters);
        }


        /// <summary>
        /// 增加一条数据
        /// </summary>
        public bool Add(Twee.Model.Adminstrator model)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("insert into wn_adminstrator(");
            strSql.Append("guid,loginNo,pass,wnstat,role,createtime)");
            strSql.Append(" values (");
            strSql.Append("@guid,@loginNo,@pass,@wnstat,@role,getdate())");
            SqlParameter[] parameters = {
					new SqlParameter("@guid", SqlDbType.UniqueIdentifier,16),
					new SqlParameter("@loginNo", SqlDbType.NVarChar,50),
					new SqlParameter("@pass", SqlDbType.NVarChar,50),
					new SqlParameter("@wnstat", SqlDbType.Int,4),
					new SqlParameter("@role", SqlDbType.Int,4)};
            parameters[0].Value = Guid.NewGuid();
            parameters[1].Value = model.loginNo;
            parameters[2].Value = model.pass;
            parameters[3].Value = model.wnstat;
            parameters[4].Value = model.role;

            int rows = DbHelperSQL.ExecuteSql(strSql.ToString(), parameters);
            if (rows > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        /// <summary>
        /// 更新一条数据
        /// </summary>
        public bool Update(Twee.Model.Adminstrator model)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("update wn_adminstrator set ");
            strSql.Append("loginNo=@loginNo,");
            strSql.Append("pass=@pass,");
            strSql.Append("wnstat=@wnstat,");
            strSql.Append("role=@role");
            strSql.Append(" where guid=@guid ");
            SqlParameter[] parameters = {
					new SqlParameter("@loginNo", SqlDbType.NVarChar,50),
					new SqlParameter("@pass", SqlDbType.NVarChar,50),
					new SqlParameter("@wnstat", SqlDbType.Int,4),
					new SqlParameter("@role", SqlDbType.Int,4),
					new SqlParameter("@guid", SqlDbType.UniqueIdentifier,16)};
            parameters[0].Value = model.loginNo;
            parameters[1].Value = model.pass;
            parameters[2].Value = model.wnstat;
            parameters[3].Value = model.role;
            parameters[4].Value = model.guid;

            int rows = DbHelperSQL.ExecuteSql(strSql.ToString(), parameters);
            if (rows > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// 删除一条数据
        /// </summary>
        public bool Delete(Guid guid)
        {

            StringBuilder strSql = new StringBuilder();
            strSql.Append("delete from wn_adminstrator ");
            strSql.Append(" where guid=@guid ");
            SqlParameter[] parameters = {
					new SqlParameter("@guid", SqlDbType.UniqueIdentifier,16)			};
            parameters[0].Value = guid;

            int rows = DbHelperSQL.ExecuteSql(strSql.ToString(), parameters);
            if (rows > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        /// <summary>
        /// 批量删除数据
        /// </summary>
        public bool DeleteList(string guidlist)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("delete from wn_adminstrator ");
            strSql.Append(" where guid in (" + guidlist + ")  ");
            int rows = DbHelperSQL.ExecuteSql(strSql.ToString());
            if (rows > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }


        /// <summary>
        /// 得到一个对象实体
        /// </summary>
        public Twee.Model.Adminstrator GetModel(Guid guid)
        {

            StringBuilder strSql = new StringBuilder();
            strSql.Append("select  top 1 guid,loginNo,pass,wnstat,role,createtime from wn_adminstrator ");
            strSql.Append(" where guid=@guid ");
            SqlParameter[] parameters = {
					new SqlParameter("@guid", SqlDbType.UniqueIdentifier,16)			};
            parameters[0].Value = guid;

            Twee.Model.Adminstrator model = new Twee.Model.Adminstrator();
            DataSet ds = DbHelperSQL.Query(strSql.ToString(), parameters);
            if (ds.Tables[0].Rows.Count > 0)
            {
                return DataRowToModel(ds.Tables[0].Rows[0]);
            }
            else
            {
                return null;
            }
        }


        /// <summary>
        /// 得到一个对象实体
        /// </summary>
        public Twee.Model.Adminstrator DataRowToModel(DataRow row)
        {
            Twee.Model.Adminstrator model = new Twee.Model.Adminstrator();
            if (row != null)
            {
                if (row["guid"] != null && row["guid"].ToString() != "")
                {
                    model.guid = new Guid(row["guid"].ToString());
                }
                if (row["loginNo"] != null)
                {
                    model.loginNo = row["loginNo"].ToString();
                }
                if (row["pass"] != null)
                {
                    model.pass = row["pass"].ToString();
                }
                if (row["wnstat"] != null && row["wnstat"].ToString() != "")
                {
                    model.wnstat = int.Parse(row["wnstat"].ToString());
                }
                if (row["role"] != null && row["role"].ToString() != "")
                {
                    model.role = int.Parse(row["role"].ToString());
                }
                if (row["createtime"] != null && row["createtime"].ToString() != "")
                {
                    model.createtime = Convert.ToDateTime(row["createtime"].ToString());
                }
            }
            return model;
        }

        /// <summary>
        /// 获得数据列表
        /// </summary>
        public DataSet GetList(string strWhere)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("select guid,loginNo,pass,wnstat,role,createtime ");
            strSql.Append(" FROM wn_adminstrator ");
            if (strWhere.Trim() != "")
            {
                strSql.Append(" where " + strWhere);
            }
            return DbHelperSQL.Query(strSql.ToString());
        }

        public Twee.Model.Adminstrator GetSingle(string username, string pwd)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("select guid,loginNo,pass,wnstat,role,createtime ");
            strSql.Append(" FROM wn_adminstrator ");
            strSql.Append(" where  loginNo=@loginNo and pass=@pass and wnstat=1");
            SqlParameter[] parameters = {
					new SqlParameter("@loginNo", SqlDbType.NVarChar,50),
                    new SqlParameter("@pass", SqlDbType.NVarChar,50),
           };
            parameters[0].Value = username;
            parameters[1].Value = pwd;
            Twee.Model.Adminstrator model = new Twee.Model.Adminstrator();
            DataSet ds = DbHelperSQL.Query(strSql.ToString(), parameters);
            if (ds.Tables[0].Rows.Count > 0)
            {
                return DataRowToModel(ds.Tables[0].Rows[0]);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// 获得前几行数据
        /// </summary>
        public DataSet GetList(int Top, string strWhere, string filedOrder)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("select ");
            if (Top > 0)
            {
                strSql.Append(" top " + Top.ToString());
            }
            strSql.Append(" guid,loginNo,pass,wnstat,role,createtime ");
            strSql.Append(" FROM wn_adminstrator ");
            if (strWhere.Trim() != "")
            {
                strSql.Append(" where " + strWhere);
            }
            strSql.Append(" order by " + filedOrder);
            return DbHelperSQL.Query(strSql.ToString());
        }

        /// <summary>
        /// 获取记录总数
        /// </summary>
        public int GetRecordCount(string strWhere)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("select count(1) FROM wn_adminstrator ");
            if (strWhere.Trim() != "")
            {
                strSql.Append(" where " + strWhere);
            }
            object obj = DbHelperSQL.GetSingle(strSql.ToString());
            if (obj == null)
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }
        /// <summary>
        /// 分页获取数据列表
        /// </summary>
        public DataSet GetListByPage(string strWhere, string orderby, int startIndex, int endIndex)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("SELECT * FROM ( ");
            strSql.Append(" SELECT ROW_NUMBER() OVER (");
            if (!string.IsNullOrEmpty(orderby.Trim()))
            {
                strSql.Append("order by T." + orderby);
            }
            else
            {
                strSql.Append("order by T.guid desc");
            }
            strSql.Append(")AS Row, T.*  from wn_adminstrator T ");
            if (!string.IsNullOrEmpty(strWhere.Trim()))
            {
                strSql.Append(" WHERE " + strWhere);
            }
            strSql.Append(" ) TT");
            strSql.AppendFormat(" WHERE TT.Row between {0} and {1}", startIndex, endIndex);
            return DbHelperSQL.Query(strSql.ToString());
        }

        /*
        /// <summary>
        /// 分页获取数据列表
        /// </summary>
        public DataSet GetList(int PageSize,int PageIndex,string strWhere)
        {
            SqlParameter[] parameters = {
                    new SqlParameter("@tblName", SqlDbType.VarChar, 255),
                    new SqlParameter("@fldName", SqlDbType.VarChar, 255),
                    new SqlParameter("@PageSize", SqlDbType.Int),
                    new SqlParameter("@PageIndex", SqlDbType.Int),
                    new SqlParameter("@IsReCount", SqlDbType.Bit),
                    new SqlParameter("@OrderType", SqlDbType.Bit),
                    new SqlParameter("@strWhere", SqlDbType.VarChar,1000),
                    };
            parameters[0].Value = "wn_adminstrator";
            parameters[1].Value = "guid";
            parameters[2].Value = PageSize;
            parameters[3].Value = PageIndex;
            parameters[4].Value = 0;
            parameters[5].Value = 0;
            parameters[6].Value = strWhere;	
            return DbHelperSQL.RunProcedure("UP_GetRecordByPage",parameters,"ds");
        }*/

        #endregion  BasicMethod
    }
}
